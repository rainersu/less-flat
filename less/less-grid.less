
@def-if-responsive: true;
    
@def-grid-col-count: 16;
@def-grid-gap-width: 20px;

@def-layout-width-list: 1024px, 1280px, 1440px;
@def-layout-list-index: 1;

@def-layout-extra-width: 0px;

@opt-grid-gap-width: round(@def-grid-gap-width / 2) * 2;
@opt-layout-count: length(@def-layout-width-list);
@opt-layout-extra-width: @def-layout-extra-width + 32;

@media screen and (max-width: 400px) {
    @-ms-viewport {
        width: 320px;
    }
}

.end,
.row:before,
.row:after {
    content: ".";
    font:0/0 serif;
    display: block;
    overflow: hidden;
    visibility: hidden;
    width: 0;
    height: 0;
}

.end,
.row:after {
    clear:both;
}

.row,
.col {
    zoom:1;
    display: block;
    box-sizing: border-box;
    margin-left: -@opt-grid-gap-width;
}

.col {
    float: left;
    margin-left:  @opt-grid-gap-width;
}

.box {
    margin: 0 auto;
    overflow: hidden;
}

.grid(@col-count, @gap-width, @row-width) {
    
    @col_width: floor((@row-width - @gap-width * (@col-count - 1)) / @col-count);
    @row_width: @col-count * (@col_width + @gap-width);
    
    .cell(@col-index) when (@col-index > 0) {
        
        @width: @col-index * @col_width + (@col-index - 1) * @gap-width;
        
        .col@{col-index} {
            width: @width;
        }

        .cell(@col-index - 1);

    }

    .cell(@col-count);
 
}

.grid(@def-grid-col-count, @opt-grid-gap-width, extract(@def-layout-width-list, @def-layout-list-index) - @opt-layout-extra-width);

.min-media-query(@min-width) {
    @media (min-width: @min-width) {
        .grid(@def-grid-col-count, @opt-grid-gap-width, @min-width);
    }    
}
.max-media-query(@max-width) {
    @media (max-width: @max-width) {
        .grid(@def-grid-col-count, @opt-grid-gap-width, @max-width);      
    }
}
.mid-media-query(@max-width, @min-width) {
    @media (min-width: @min-width) and (max-width: @max-width) {
        .grid(@def-grid-col-count, @opt-grid-gap-width, @min-width); 
    }    
}

.mq(@max-index, @min-index, @max-media, @min-media) when not (@max-index = @def-layout-list-index) and (@max-index = 1) {
    .max-media-query(@max-media - @opt-layout-extra-width - 1);
}
.mq(@max-index, @min-index, @max-media, @min-media) when not (@max-index = @def-layout-list-index) and (@max-index > 1) and (@max-index <= @opt-layout-count) {
    .mid-media-query(@max-media - @opt-layout-extra-width - 1, @min-media - @opt-layout-extra-width);
}
.mq(@max-index, @min-index, @max-media, @min-media) when not (@max-index = @def-layout-list-index) and (@max-index > @opt-layout-count) {
    .min-media-query(@min-media - @opt-layout-extra-width);
}

.page(@layout-index) when (@layout-index > 0) {
    .mq(@layout-index, @layout-index - 1, extract(@def-layout-width-list, @layout-index), extract(@def-layout-width-list, @layout-index - 1));
    .page(@layout-index - 1);
}

& when (@def-if-responsive = true) {
    .page(@opt-layout-count + 1);
}
