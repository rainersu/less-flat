
@opt-grid-gap-hsize: round(@def-grid-gap-hsize / 2) * 2;
@opt-layout-count: length(@def-layout-width-list);
@opt-layout-subtract-width: 32px + @def-layout-subtract-width;

.end,
.row:before,
.row:after {
    content: ".";
    font:0/0 serif;
    display: block;
    overflow: hidden;
    visibility: hidden;
    width:  0;
    height: 0;
}

.end,
.row:after {
    clear:both;
}

.row,
.col {
    &:extend(
        .ex-block,
        .ex-border-box
    );
    zoom: 1;
    min-height: 1;
    margin: -@def-grid-gap-vsize 0 0 -@opt-grid-gap-hsize;
}

.col {
    &:extend(.ex-relative);
    float: left;
    margin:  @def-grid-gap-vsize 0 0  @opt-grid-gap-hsize;
}

.box {
    &:extend(.ex-center-block);
}

hr {
    &:extend(
        .ex-block,
        .ex-no-border,
        .ex-no-margin,
        .ex-border-box
    );
    color: transparent;
    background: transparent;
    height: @def-grid-gap-vsize;
    &.col {
        margin: 0;
        height: 1px;
        width: @def-grid-gap-vsize;
    }
}

.hr,
.hr-t {
    &:extend(.ex-gap-t);
}

.hr,
.hr-b {
    &:extend(.ex-gap-b);
}

.mi-grid(@col-count, @gap-width, @row-width, @prefix: @def-prefix, @suffix: @def-suffix, @push: @def-push, @pull: @def-pull) {
    
    @col_width: floor((@row-width - @gap-width * (@col-count - 1)) / @col-count);
    @row_width: @col-count * (@col_width + @gap-width);
    
    .mi-cell(@col-index) when (@col-index > 0) {
        
        @width: @col-index * @col_width + (@col-index - 1) * @gap-width;
        @fix_width: @width + @gap-width * 2;
        @push-size: @width + @gap-width;
        
        .col@{col-index} {
            width: @width;
        }
        & when (@col-index < @col-count) {
            & when (@prefix = true) {
                .prefix@{col-index} {
                    margin-left:  @fix_width;
                }
            }
            & when (@suffix = true) {
                .suffix@{col-index} {
                    margin-right: @fix_width;
                }
            }
            & when (@push   = true) {
                .push@{col-index}   {
                    left:  @push-size;
                }
            }
            & when (@pull   = true) {
                .pull@{col-index}   {
                    right: @push-size;
                }
            }
        }
        .mi-cell(@col-index - 1);
    }
    .mi-cell(@col-count);
}

.mi-grid(@def-grid-col-count, @opt-grid-gap-hsize, extract(@def-layout-width-list, @def-layout-list-index) - @opt-layout-subtract-width);

.mi-min-media-query(@min-width) {
    @media (min-width: @min-width) {
        .mi-grid(@def-grid-col-count, @opt-grid-gap-hsize, @min-width);
    }    
}
.mi-max-media-query(@max-width) {
    @media (max-width: @max-width) {
        .mi-grid(@def-grid-col-count, @opt-grid-gap-hsize, @max-width);      
    }
}
.mi-mid-media-query(@max-width, @min-width) {
    @media (min-width: @min-width) and (max-width: @max-width) {
        .mi-grid(@def-grid-col-count, @opt-grid-gap-hsize, @min-width); 
    }    
}

.mi-mq(@max-index, @min-index, @max-media, @min-media) when not (@max-index = @def-layout-list-index) and (@max-index = 1) {
    .mi-max-media-query(@max-media - @opt-layout-subtract-width - 1);
}
.mi-mq(@max-index, @min-index, @max-media, @min-media) when not (@max-index = @def-layout-list-index) and (@max-index > 1) and (@max-index <= @opt-layout-count) {
    .mi-mid-media-query(@max-media - @opt-layout-subtract-width - 1, @min-media - @opt-layout-subtract-width);
}
.mi-mq(@max-index, @min-index, @max-media, @min-media) when not (@max-index = @def-layout-list-index) and (@max-index > @opt-layout-count) {
    .mi-min-media-query(@min-media - @opt-layout-subtract-width);
}

.mi-page(@layout-index) when (@layout-index > 0) {
    .mi-mq(@layout-index, @layout-index - 1, extract(@def-layout-width-list, @layout-index), extract(@def-layout-width-list, @layout-index - 1));
    .mi-page(@layout-index - 1);
}

& when (@def-responsive = true) {
    .mi-page(@opt-layout-count + 1);
}

@media screen and (max-width: 400px) {
    @-ms-viewport {
        width: 320px;
    }
}
